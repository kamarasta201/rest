{"version":3,"sources":["nimble:restivus/lib/restivus.coffee","nimble:restivus/lib/route.coffee","nimble:restivus/lib/auth.coffee"],"names":[],"mappings":"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","file":"/packages/nimble_restivus.js","sourcesContent":["class @Restivus\n\n  constructor: ->\n    @routes = []\n    @config =\n      paths: []\n      useAuth: false\n      apiPath: 'api/'\n      version: 1\n      prettyJson: false\n      auth:\n        token: 'services.resume.loginTokens.token'\n        user: ->\n          userId: @request.headers['x-user-id']\n          token: @request.headers['x-auth-token']\n      onLoggedIn: -> {}\n      onLoggedOut: -> {}\n      useClientRouter: true\n      defaultHeaders:\n        'Content-Type': 'application/json'\n      enableCors: true\n    @configured = false\n\n\n  ###*\n    Configure the ReST API\n\n    Must be called exactly once, from anywhere on the server.\n  ###\n  configure: (config) =>\n    if @configured\n      throw new Error 'Restivus.configure() can only be called once'\n\n    @configured = true\n\n    # Configure API with the given options\n    _.extend @config, config\n\n    # Set default header to enable CORS if configured\n    if @config.enableCors\n      _.extend @config.defaultHeaders, 'Access-Control-Allow-Origin': '*'\n\n    # Normalize the API path\n    if @config.apiPath[0] is '/'\n      @config.apiPath = @config.apiPath.slice 1\n    if _.last(@config.apiPath) isnt '/'\n      @config.apiPath = @config.apiPath + '/'\n\n    # Disable Iron Router on the client if it's not needed\n    if not @config.useClientRouter and Meteor.isClient\n      Router.options.autoStart = false\n\n    # Add any existing routes to the API now that it's configured\n    _.each @routes, (route) -> route.addToApi()\n\n    # Add default login and logout endpoints if auth is configured\n    if @config.useAuth\n      @_initAuth()\n      console.log \"Restivus configured at #{@config.apiPath} with authentication\"\n    else\n      console.log \"Restivus configured at #{@config.apiPath} without authentication\"\n    return\n\n\n  ###*\n    Add endpoints for the given HTTP methods at the given path\n  ###\n  addRoute: (path, options, methods) ->\n    # Create a new route and add it to our list of existing routes\n    route = new Route(this, path, options, methods)\n    @routes.push(route)\n\n    # Don't add the route to the API until the API has been configured\n    route.addToApi() if @configured\n    return\n\n\n  ###*\n    Generate routes for the Meteor Collection with the given name\n  ###\n  addCollection: (collection, options={}) ->\n    methods = ['get', 'post', 'put', 'delete', 'getAll', 'deleteAll']\n    methodsOnCollection = ['post', 'getAll', 'deleteAll']\n\n    # Grab the set of endpoints\n    if collection is Meteor.users\n      collectionEndpoints = @_userCollectionEndpoints\n    else\n      collectionEndpoints = @_collectionEndpoints\n\n    # Flatten the options and set defaults if necessary\n    endpointsAwaitingConfiguration = options.endpoints or {}\n    routeOptions = options.routeOptions or {}\n    excludedEndpoints = options.excludedEndpoints or []\n    # Use collection name as default path\n    path = options.path or collection._name\n\n    # Separate the requested endpoints by the route they belong to (one for operating on the entire collection and one\n    # for operating on a single entity within the collection)\n    collectionRouteEndpoints = {}\n    entityRouteEndpoints = {}\n    if _.isEmpty(endpointsAwaitingConfiguration) and _.isEmpty(excludedEndpoints)\n      # Generate all endpoints on this collection\n      _.each methods, (method) ->\n        # Partition the endpoints into their respective routes\n        if method in methodsOnCollection\n          _.extend collectionRouteEndpoints, collectionEndpoints[method].call(this, collection)\n        else _.extend entityRouteEndpoints, collectionEndpoints[method].call(this, collection)\n        return\n      , this\n    else\n      # Generate any endpoints that haven't been explicitly excluded\n      _.each methods, (method) ->\n        if method not in excludedEndpoints and endpointsAwaitingConfiguration[method] isnt false\n          # Configure endpoint and map to it's http method\n          # TODO: Consider predefining a map of methods to their http method type (e.g., deleteAll: delete)\n          endpointOptions = endpointsAwaitingConfiguration[method]\n          configuredEndpoint = {}\n          _.each collectionEndpoints[method].call(this, collection), (action, methodType) ->\n            configuredEndpoint[methodType] =\n              _.chain action\n              .clone()\n              .extend endpointOptions\n              .value()\n          # Partition the endpoints into their respective routes\n          if method in methodsOnCollection\n            _.extend collectionRouteEndpoints, configuredEndpoint\n          else _.extend entityRouteEndpoints, configuredEndpoint\n          return\n      , this\n\n    # Add the routes to the API\n    @addRoute path, routeOptions, collectionRouteEndpoints\n    @addRoute \"#{path}/:id\", routeOptions, entityRouteEndpoints\n\n    return\n\n\n  ###*\n    A set of endpoints that can be applied to a Collection Route\n  ###\n  _collectionEndpoints:\n    get: (collection) ->\n      get:\n        action: ->\n          entity = collection.findOne @urlParams.id\n          if entity\n            {status: \"success\", data: entity}\n          else\n            statusCode: 404\n            body: {status: \"fail\", message: \"Item not found\"}\n    put: (collection) ->\n      put:\n        action: ->\n          entityIsUpdated = collection.update @urlParams.id, @bodyParams\n          if entityIsUpdated\n            entity = collection.findOne @urlParams.id\n            {status: \"success\", data: entity}\n          else\n            statusCode: 404\n            body: {status: \"fail\", message: \"Item not found\"}\n    delete: (collection) ->\n      delete:\n        action: ->\n          if collection.remove @urlParams.id\n            {status: \"success\", data: message: \"Item removed\"}\n          else\n            statusCode: 404\n            body: {status: \"fail\", message: \"Item not found\"}\n    post: (collection) ->\n      post:\n        action: ->\n          entityId = collection.insert @bodyParams\n          entity = collection.findOne entityId\n          if entity\n            {status: \"success\", data: entity}\n          else\n            statusCode: 400\n            {status: \"fail\", message: \"No item added\"}\n    getAll: (collection) ->\n      get:\n        action: ->\n          entities = collection.find().fetch()\n          if entities\n            {status: \"success\", data: entities}\n          else\n            statusCode: 404\n            body: {status: \"fail\", message: \"Unable to retrieve items from collection\"}\n    deleteAll: (collection) ->\n      delete:\n        action: ->\n          itemsRemoved = collection.remove({})\n          if itemsRemoved\n            {status: \"success\", data: message: \"Removed #{itemsRemoved} items\"}\n          else\n            statusCode: 404\n            body: {status: \"fail\", message: \"No items found\"}\n\n\n  ###*\n    A set of endpoints that can be applied to a Meteor.users Collection Route\n  ###\n  _userCollectionEndpoints:\n    get: (collection) ->\n      get:\n        action: ->\n          entity = collection.findOne @urlParams.id, fields: profile: 1\n          if entity\n            {status: \"success\", data: entity}\n          else\n            statusCode: 404\n            body: {status: \"fail\", message: \"User not found\"}\n    put: (collection) ->\n      put:\n        action: ->\n          entityIsUpdated = collection.update @urlParams.id, $set: profile: @bodyParams\n          if entityIsUpdated\n            entity = collection.findOne @urlParams.id, fields: profile: 1\n            {status: \"success\", data: entity}\n          else\n            statusCode: 404\n            body: {status: \"fail\", message: \"User not found\"}\n    delete: (collection) ->\n      delete:\n        action: ->\n          if collection.remove @urlParams.id\n            {status: \"success\", data: message: \"User removed\"}\n          else\n            statusCode: 404\n            body: {status: \"fail\", message: \"User not found\"}\n    post: (collection) ->\n      post:\n        action: ->\n          # Create a new user account\n          entityId = Accounts.createUser @bodyParams\n          entity = collection.findOne entityId, fields: profile: 1\n          if entity\n            {status: \"success\", data: entity}\n          else\n            statusCode: 400\n            {status: \"fail\", message: \"No user added\"}\n    getAll: (collection) ->\n      get:\n        action: ->\n          entities = collection.find({}, fields: profile: 1).fetch()\n          if entities\n            {status: \"success\", data: entities}\n          else\n            statusCode: 404\n            body: {status: \"fail\", message: \"Unable to retrieve users\"}\n    deleteAll: (collection) ->\n      delete:\n        action: ->\n          usersRemoved = collection.remove({})\n          if usersRemoved\n            {status: \"success\", data: message: \"Removed #{usersRemoved} users\"}\n          else\n            statusCode: 404\n            body: {status: \"fail\", message: \"No users found\"}\n\n\n  ###\n    Add /login and /logout endpoints to the API\n  ###\n  _initAuth: ->\n    self = this\n    ###\n      Add a login endpoint to the API\n\n      After the user is logged in, the onLoggedIn hook is called (see Restfully.configure() for adding hook).\n    ###\n    @addRoute 'login', {authRequired: false},\n      post: ->\n        # Grab the username or email that the user is logging in with\n        user = {}\n        if @bodyParams.user.indexOf('@') is -1\n          user.username = @bodyParams.user\n        else\n          user.email = @bodyParams.user\n\n        # Try to log the user into the user's account (if successful we'll get an auth token back)\n        try\n          auth = Auth.loginWithPassword user, @bodyParams.password\n        catch e\n          return {} =\n            statusCode: e.error\n            body: status: \"error\", message: e.reason\n\n        # Get the authenticated user\n        # TODO: Consider returning the user in Auth.loginWithPassword(), instead of fetching it again here\n        if auth.userId and auth.authToken\n          @user = Meteor.users.findOne\n            '_id': auth.userId\n            'services.resume.loginTokens.token': auth.authToken\n          @userId = @user._id\n\n        # TODO: Add any return data to response as data.extra\n        # Call the login hook with the authenticated user attached\n        self.config.onLoggedIn.call this\n\n        {status: \"success\", data: auth}\n\n    ###\n      Add a logout endpoint to the API\n\n      After the user is logged out, the onLoggedOut hook is called (see Restfully.configure() for adding hook).\n    ###\n    @addRoute 'logout', {authRequired: true},\n      get: ->\n        # Remove the given auth token from the user's account\n        authToken = @request.headers['x-auth-token']\n        Meteor.users.update @user._id, {$pull: {'services.resume.loginTokens': {token: authToken}}}\n\n        # TODO: Add any return data to response as data.extra\n        # Call the logout hook with the logged out user attached\n        self.config.onLoggedOut.call this\n\n        {status: \"success\", data: message: 'You\\'ve been logged out!'}\n\nRestivus = new @Restivus","class @Route\n\n  constructor: (@api, @path, @options, @endpoints) ->\n    # Check if options were provided\n    if not @endpoints\n      @endpoints = @options\n      @options = {}\n\n\n  addToApi: ->\n    self = this\n\n    # Throw an error if a route has already been added at this path\n    # TODO: Check for collisions with paths that follow same pattern with different parameter names\n    if _.contains @api.config.paths, @path\n      throw new Error \"Cannot add a route at an existing path: #{@path}\"\n\n    # Configure each endpoint on this route\n    @_resolveEndpoints()\n    @_configureEndpoints()\n\n    # Add the path to our list of existing paths\n    @api.config.paths.push @path\n\n    # Setup endpoints on route using Iron Router\n    fullPath = @api.config.apiPath + @path\n    Router.route fullPath,\n      where: 'server'\n      action: ->\n        # Add parameters in the URL and request body to the endpoint context\n        # TODO: Decide whether or not to nullify the copied objects. Makes sense to do it, right?\n        @urlParams = @params\n        @queryParams = @params.query\n        @bodyParams = @request.body\n\n        # Add function to endpoint context for indicating a response has been initiated manually\n        @done = =>\n          @_responseInitiated = true\n\n        # Run the requested endpoint\n        responseData = null\n        method = @request.method\n        if self.endpoints[method.toLowerCase()]\n          # Add the endpoint's resolved configuration options to its context\n          _.extend this, self.endpoints[method.toLowerCase()]\n          responseData = self._callEndpoint this, self.endpoints[method.toLowerCase()]\n        else\n          responseData = {statusCode: 404, body: {status: \"error\", message:'API endpoint not found'}}\n\n        if responseData is null or responseData is undefined\n          throw new Error \"Cannot return null or undefined from an endpoint: #{method} #{fullPath}\"\n        if @response.headersSent and not @_responseInitiated\n          throw new Error \"Must call this.done() after handling endpoint response manually: #{method} #{fullPath}\"\n\n        if @_responseInitiated\n          # Ensure the response is properly completed\n          @response.end()\n          return\n\n        # Generate and return the http response, handling the different endpoint response types\n        if responseData.body and (responseData.statusCode or responseData.headers)\n          self._respond this, responseData.body, responseData.statusCode, responseData.headers\n        else\n          self._respond this, responseData\n\n\n  ###\n    Convert all endpoints on the given route into our expected endpoint object if it is a bare function\n\n    @param {Route} route The route the endpoints belong to\n  ###\n  _resolveEndpoints: ->\n    _.each @endpoints, (endpoint, method, endpoints) ->\n      if _.isFunction(endpoint)\n        endpoints[method] = {action: endpoint}\n    return\n\n\n  ###\n    Configure the authentication and role requirement on an endpoint\n\n    Once it's globally configured in the API, authentication can be required on an entire route or individual\n    endpoints. If required on an entire route, that serves as the default. If required in any individual endpoints, that\n    will override the default.\n\n    After the endpoint is configured, all authentication and role requirements of an endpoint can be accessed at\n    <code>endpoint.authRequired</code> and <code>endpoint.roleRequired</code>, respectively.\n\n    @param {Route} route The route the endpoints belong to\n    @param {Endpoint} endpoint The endpoint to configure\n  ###\n  _configureEndpoints: ->\n    _.each @endpoints, (endpoint) ->\n        # Configure acceptable roles\n      if not @options?.roleRequired\n        @options.roleRequired = []\n      if not endpoint.roleRequired\n        endpoint.roleRequired = []\n      endpoint.roleRequired = _.union endpoint.roleRequired, @options.roleRequired\n      # Make it easier to check if no roles are required\n      if _.isEmpty endpoint.roleRequired\n        endpoint.roleRequired = false\n\n      # Configure auth requirement\n      if not @api.config.useAuth\n        endpoint.authRequired = false\n      else if endpoint.authRequired is undefined\n        if @options?.authRequired or endpoint.roleRequired\n          endpoint.authRequired = true\n        else\n          endpoint.authRequired = false\n      return\n    , this\n    return\n\n\n  ###\n    Authenticate an endpoint if required, and return the result of calling it\n\n    @returns The endpoint response or a 401 if authentication fails\n  ###\n  _callEndpoint: (endpointContext, endpoint) ->\n    # Call the endpoint if authentication doesn't fail\n    if @_authAccepted endpointContext, endpoint\n      if @_roleAccepted endpointContext, endpoint\n        endpoint.action.call endpointContext\n      else\n        statusCode: 401\n        body: {status: \"error\", message: \"You do not have permission to do this.\"}\n    else\n      statusCode: 401\n      body: {status: \"error\", message: \"You must be logged in to do this.\"}\n\n\n  ###\n    Authenticate the given endpoint if required\n\n    Once it's globally configured in the API, authentication can be required on an entire route or individual\n    endpoints. If required on an entire endpoint, that serves as the default. If required in any individual endpoints, that\n    will override the default.\n\n    @returns False if authentication fails, and true otherwise\n  ###\n  _authAccepted: (endpointContext, endpoint) ->\n    if endpoint.authRequired\n      @_authenticate endpointContext\n    else true\n\n\n  ###\n    Verify the request is being made by an actively logged in user\n\n    If verified, attach the authenticated user to the context.\n\n    @returns {Boolean} True if the authentication was successful\n  ###\n  _authenticate: (endpointContext) ->\n    # Get auth info\n    auth = @api.config.auth.user.call(endpointContext)\n\n    # Get the user from the database\n    if not auth?.user and auth?.userId and auth?.token\n      userSelector = {}\n      userSelector._id = auth.userId\n      userSelector[@api.config.auth.token] = auth.token\n      auth.user = Meteor.users.findOne userSelector\n\n    # Attach the user and their ID to the context if the authentication was successful\n    if auth?.user\n      endpointContext.user = auth.user\n      endpointContext.userId = auth.user._id\n      true\n    else false\n\n\n  ###\n    Authenticate the user role if required\n\n    Must be called after _authAccepted().\n\n    @returns True if the authenticated user belongs to <i>any</i> of the acceptable roles on the endpoint\n  ###\n  _roleAccepted: (endpointContext, endpoint) ->\n    if endpoint.roleRequired\n      if _.isEmpty _.intersection(endpoint.roleRequired, endpointContext.user.roles)\n        return false\n    true\n\n\n  ###\n    Respond to an HTTP request\n  ###\n  _respond: (endpointContext, body, statusCode=200, headers={}) ->\n    # Override any default headers that have been provided (keys are normalized to be case insensitive)\n    # TODO: Consider only lowercasing the header keys we need normalized, like Content-Type\n    defaultHeaders = @_lowerCaseKeys @api.config.defaultHeaders\n    headers = @_lowerCaseKeys headers\n    headers = _.extend defaultHeaders, headers\n\n    # Prepare JSON body for response when Content-Type indicates JSON type\n    if headers['content-type'].match(/json|javascript/) isnt null\n      if @api.config.prettyJson\n        body = JSON.stringify body, undefined, 2\n      else\n        body = JSON.stringify body\n\n    # Send response\n    endpointContext.response.writeHead statusCode, headers\n    endpointContext.response.write body\n    endpointContext.response.end()\n\n\n  ###\n    Return the object with all of the keys converted to lowercase\n  ###\n  _lowerCaseKeys: (object) ->\n    _.chain object\n    .pairs()\n    .map (attr) ->\n      [attr[0].toLowerCase(), attr[1]]\n    .object()\n    .value()\n","@Auth or= {}\n\n###\n  A valid user will have exactly one of the following identification fields: id, username, or email\n###\nuserValidator = Match.Where (user) ->\n  check user,\n    id: Match.Optional String\n    username: Match.Optional String\n    email: Match.Optional String\n\n  if _.keys(user).length is not 1\n    throw new Match.Error 'User must have exactly one identifier field'\n\n  return true\n\n\n###\n  Return a MongoDB query selector for finding the given user\n###\ngetUserQuerySelector = (user) ->\n  if user.id\n    return {'_id': user.id}\n  else if user.username\n    return {'username': user.username}\n  else if user.email\n    return {'emails.address': user.email}\n\n  # We shouldn't be here if the user object was properly validated\n  throw new Error 'Cannot create selector from invalid user'\n\n\n###\n  Log a user in with their password\n###\n@Auth.loginWithPassword = (user, password) ->\n  if not user or not password\n    return undefined # TODO: Should we throw a more descriptive error here, or is that insecure?\n\n  # Validate the login input types\n  check user, userValidator\n  check password, String\n\n  # Retrieve the user from the database\n  authenticatingUserSelector = getUserQuerySelector(user)\n  authenticatingUser = Meteor.users.findOne(authenticatingUserSelector)\n\n  if not authenticatingUser\n    throw new Meteor.Error 403, 'User not found'\n  if not authenticatingUser.services?.password\n    throw new Meteor.Error 403, 'User has no password set'\n\n  # Authenticate the user's password\n  passwordVerification = Accounts._checkPassword authenticatingUser, password\n  if passwordVerification.error\n    throw new Meteor.Error 403, 'Incorrect password'\n\n  # Add a new auth token to the user's account\n  authToken = Accounts._generateStampedLoginToken()\n  Meteor.users.update authenticatingUser._id, {$push: {'services.resume.loginTokens': authToken}}\n\n  return {authToken: authToken.token, userId: authenticatingUser._id}\n"]}